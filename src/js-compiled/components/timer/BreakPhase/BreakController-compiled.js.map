{"version":3,"sources":["../../../../../app/components/timer/BreakPhase/BreakController.js"],"names":["BreakController","elem1","elem2","elem3","breakTimeDuration","timerElements","Timer","initializeTimerElements","j","arguments","length","style","animationDuration","timerMinutes","innerHTML","ElementsListener","listenToEvents","finishTaskButton","finishPhaseController","finishTask","timerKey","startPomodoraButton","workPhaseController","startPomodora","breakDuration","breakModel","receiveTimeOfBreak","setTimeout","breakPhaseView","notifyBreakOver","breakController"],"mappings":";;;;;;IAAMA,e;;;;;;;kDAEwBC,K,EAAOC,K,EAAOC,K,EAAOC,iB,EAAmB;AAC9D,gBAAIC,gBAAgBC,MAAMC,uBAA1B;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIC,UAAUC,MAAV,GAAmB,CAAvC,EAA0CF,GAA1C,EAA+C;AAC3CC,0BAAUD,CAAV,EAAaG,KAAb,CAAmBC,iBAAnB,GAAuCR,oBAAoB,EAApB,GAAyB,GAAhE;AACH;AACDC,0BAAcQ,YAAd,CAA2BC,SAA3B,GAAuCV,iBAAvC;AACH;;;+CAEsB;AACnB,gBAAIC,gBAAgBC,MAAMC,uBAA1B;AACAQ,6BAAiBC,cAAjB,CAAgC,OAAhC,EAAyCX,cAAcY,gBAAvD,EAAyE,YAAY;AACjFC,sCAAsBC,UAAtB,CAAiCC,QAAjC;AACH,aAFD;AAGAL,6BAAiBC,cAAjB,CAAgC,OAAhC,EAAyCX,cAAcgB,mBAAvD,EAA4EC,oBAAoBC,aAAhG;AACH;;;4CAEmBtB,K,EAAOC,K,EAAOC,K,EAAO;AACrC,gBAAIqB,gBAAiBC,WAAWC,kBAAX,CAA8BzB,KAA9B,EAAqCC,KAArC,EAA4CC,KAA5C,CAArB;AACAwB,uBAAW,YAAY;AACnBC,+BAAeC,eAAf;AACH,aAFD,EAEGL,gBAAgB,IAAhB,GAAuB,EAF1B;AAGH;;;;;;AAGL,IAAIM,kBAAkB,IAAI9B,eAAJ,EAAtB","file":"BreakController-compiled.js","sourcesContent":["class BreakController {\r\n\r\n    addBreakAnimationDuration(elem1, elem2, elem3, breakTimeDuration) {\r\n        let timerElements = Timer.initializeTimerElements;\r\n        for (let j = 0; j < arguments.length - 1; j++) {\r\n            arguments[j].style.animationDuration = breakTimeDuration * 60 + 's';\r\n        }\r\n        timerElements.timerMinutes.innerHTML = breakTimeDuration;\r\n    }\r\n\r\n    subscribeBreakEvents() {\r\n        let timerElements = Timer.initializeTimerElements;\r\n        ElementsListener.listenToEvents('click', timerElements.finishTaskButton, function () {\r\n            finishPhaseController.finishTask(timerKey)\r\n        });\r\n        ElementsListener.listenToEvents('click', timerElements.startPomodoraButton, workPhaseController.startPomodora);\r\n    }\r\n\r\n    transferTimeOfBreak(elem1, elem2, elem3) {\r\n        let breakDuration =  breakModel.receiveTimeOfBreak(elem1, elem2, elem3);\r\n        setTimeout(function () {\r\n            breakPhaseView.notifyBreakOver();\r\n        }, breakDuration * 1000 * 60)\r\n    }\r\n}\r\n\r\nlet breakController = new BreakController();"]}